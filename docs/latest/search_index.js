var documenterSearchIndex = {"docs":
[{"location":"functions/#Helpful-Functions","page":"Helpful Functions","title":"Helpful Functions","text":"","category":"section"},{"location":"functions/","page":"Helpful Functions","title":"Helpful Functions","text":"EpistemicNetworkAnalysis.loadExample","category":"page"},{"location":"functions/","page":"Helpful Functions","title":"Helpful Functions","text":"TODO loading data from CSV, copy from old docs","category":"page"},{"location":"rotations/#Rotations","page":"Rotations","title":"Rotations","text":"","category":"section"},{"location":"rotations/","page":"Rotations","title":"Rotations","text":"The following documentation describes available dimension reduction, or \"rotations,\" available in this package.","category":"page"},{"location":"rotations/","page":"Rotations","title":"Rotations","text":"Which rotation you choose should be informed by your sense of your research story:","category":"page"},{"location":"rotations/","page":"Rotations","title":"Rotations","text":"Want to get a high level view of your data? SVDRotation will capture the most variance and is good for getting an initial sense of your data's major features\nWant to compare groups? Use MeanRotation when you have exactly two groups. Otherwise, consider LDARotation or MulticlassRotation. The distinction between these is spelled out in \"Multiclass Rotations in Epistemic Network Analysis\"\nWant to see how your qualitative data relates to continuous or hierarchical variables? Use FormulaRotation, a rotation based on a regression framework described in \"Hierarchical Epistemic Network Analysis\"\nWant to model a theoretical topic directly? Use TopicRotation to force certain connections to the left and others to the right. This is useful when you have suspicions that certain codes account for group differences and want to test those suspicions directly instead of inferring them by other means.\nWant to test the generlizability or cross-validation of your model? Use TrainedRotation to create a new model that uses the same embedding and runs the same tests as an existing model.","category":"page"},{"location":"rotations/","page":"Rotations","title":"Rotations","text":"Once you're familiar with them, continue to learn more about plotting.","category":"page"},{"location":"rotations/#SVDRotation","page":"Rotations","title":"SVDRotation","text":"","category":"section"},{"location":"rotations/","page":"Rotations","title":"Rotations","text":"EpistemicNetworkAnalysis.SVDRotation","category":"page"},{"location":"rotations/#Main.EpistemicNetworkAnalysis.SVDRotation","page":"Rotations","title":"Main.EpistemicNetworkAnalysis.SVDRotation","text":"SVDRotation()\n\nThe default rotation for linear ENA models. Reduces dimensions usings singular value decomposition\n\n\n\n\n\n","category":"type"},{"location":"rotations/#MeansRotation","page":"Rotations","title":"MeansRotation","text":"","category":"section"},{"location":"rotations/","page":"Rotations","title":"Rotations","text":"EpistemicNetworkAnalysis.MeansRotation","category":"page"},{"location":"rotations/#Main.EpistemicNetworkAnalysis.MeansRotation","page":"Rotations","title":"Main.EpistemicNetworkAnalysis.MeansRotation","text":"MeansRotation(\n    # Required, groups to compare along the x-axis\n    groupVar1::Symbol,\n    controlGroup1::Any,\n    treatmentGroup1::Any,\n\n    # Optional, groups to compare along subsequent axes\n    args...;\n\n    # Optional, whether to moderate the interactions between group dimensions\n    moderated=false\n)\n\nDefine a rotation for comparing pairs of groups, by maximizing the variance between pairs\n\nSee also: LDARotation and MulticlassRotation\n\nExample\n\nrotation = MeansRotation(\n    :Play, \"Romeo and Juliet\", \"Hamlet\",\n    :Act, 1, 5\n)\n\nStatistical Tests\n\nModels using a MeansRotation will run the following statistical tests:\n\nKruskalWallisTest for each dimension with a group pair\n\n\n\n\n\n","category":"type"},{"location":"rotations/#LDARotation","page":"Rotations","title":"LDARotation","text":"","category":"section"},{"location":"rotations/","page":"Rotations","title":"Rotations","text":"EpistemicNetworkAnalysis.LDARotation","category":"page"},{"location":"rotations/#Main.EpistemicNetworkAnalysis.LDARotation","page":"Rotations","title":"Main.EpistemicNetworkAnalysis.LDARotation","text":"LDARotation(\n    groupVar::Symbol\n)\n\nDefine a rotation for comparing multiple groups, via linear discriminant analysis\n\nSee also: MeansRotation and MulticlassRotation\n\nExample\n\nrotation = LDARotation(:Act)\n\nStatistical Tests\n\nModels using an LDARotation will run the following statistical tests:\n\nKruskalWallisTest for each dimension\n\n\n\n\n\n","category":"type"},{"location":"rotations/#MulticlassRotation","page":"Rotations","title":"MulticlassRotation","text":"","category":"section"},{"location":"rotations/","page":"Rotations","title":"Rotations","text":"EpistemicNetworkAnalysis.MulticlassRotation","category":"page"},{"location":"rotations/#Main.EpistemicNetworkAnalysis.MulticlassRotation","page":"Rotations","title":"Main.EpistemicNetworkAnalysis.MulticlassRotation","text":"MulticlassRotation(\n    groupVar::Symbol\n)\n\nDefine a rotation for comparing multiple groups, by maximizing between-group variance\n\nSee also: MeansRotation and LDARotation\n\nExample\n\nrotation = MulticlassRotation(:Act)\n\nStatistical Tests\n\nModels using an MulticlassRotation will run the following statistical tests:\n\nKruskalWallisTest for each dimension\n\n\n\n\n\n","category":"type"},{"location":"rotations/#FormulaRotation","page":"Rotations","title":"FormulaRotation","text":"","category":"section"},{"location":"rotations/","page":"Rotations","title":"Rotations","text":"EpistemicNetworkAnalysis.FormulaRotation","category":"page"},{"location":"rotations/#Main.EpistemicNetworkAnalysis.FormulaRotation","page":"Rotations","title":"Main.EpistemicNetworkAnalysis.FormulaRotation","text":"FormulaRotation(\n    regression_model1::Type{T},\n    formula1::FormulaTerm,\n    coef_index1::Int,\n    contrast1::Union{Nothing,Dict},\n    args...\n) where {T <: RegressionModel}\n\nDefine a rotation that uses regression models to determine axes most closely associated with some linear trend\n\nNote: RegressionModels must be imported from other stats packages\n\nNote: contrasts are used to model categorical data\n\nExample\n\nusing GLM\n\nrotation = EpistemicNetworkAnalysis.FormulaRotation(\n    LinearModel, @formula(edge ~ 1 + FinalGrade), 2, nothing\n)\n\nThis will fit the x-axis to the FinalGrade metadata, because:\n\nWe use LinearModel from the GLM package\nWe use the formula edge ~ 1 + FinalGrade\nAnd we use the 2nd coefficient of the LinearModel (in this case FinalGrade) to determine the values of the embedding\nWe have no categorical data in the LinearModel, so we leave the contrasts as nothing\n\nAdditional formulae may be used to define subsequent axes:\n\nrotation = EpistemicNetworkAnalysis.FormulaRotation(\n    LinearModel, @formula(edge ~ 1 + PretestGrade + PosttestGrade), 2, nothing,\n    LinearModel, @formula(edge ~ 1 + PretestGrade + PosttestGrade), 3, nothing\n)\n\nNote: When multiple formulae are given, FormulaRotation finds the plane of the effects in the accum space, rotating it such that the first formula aligns with the x-axis, and the second formula aligns approximately with the y-axis. Unless this approximation is strong, a warning will be raised describing possible issues.\n\nStatistical Tests\n\nModels using a MeansRotation will run the following statistical tests:\n\nR^2 and adjusted-R^2 for each dimension with a formula\n\n\n\n\n\n","category":"type"},{"location":"rotations/#TopicRotation","page":"Rotations","title":"TopicRotation","text":"","category":"section"},{"location":"rotations/","page":"Rotations","title":"Rotations","text":"EpistemicNetworkAnalysis.TopicRotation","category":"page"},{"location":"rotations/#Main.EpistemicNetworkAnalysis.TopicRotation","page":"Rotations","title":"Main.EpistemicNetworkAnalysis.TopicRotation","text":"TopicRotation(\n    topicName::AbstractString,\n    controlNodes::Array{Symbol},\n    treatmentNodes::Array{Symbol}\n)\n\nDefine a rotation that places its x-axis through the mean of controlNodes on the left and the mean of treatmentNodes on the right, ie., through an a priori defined topic\n\nExample\n\nrotation = TopicRotation(\n    \"Women-Death vs. Honor\",\n    [:Women, :Death],\n    [:Honor]\n)\n\n\n\n\n\n","category":"type"},{"location":"rotations/#TrainedRotation","page":"Rotations","title":"TrainedRotation","text":"","category":"section"},{"location":"rotations/","page":"Rotations","title":"Rotations","text":"EpistemicNetworkAnalysis.TrainedRotation","category":"page"},{"location":"rotations/#Main.EpistemicNetworkAnalysis.TrainedRotation","page":"Rotations","title":"Main.EpistemicNetworkAnalysis.TrainedRotation","text":"TrainedRotation(\n    trainmodel::AbstractLinearENAModel\n)\n\nDefine a rotation that copies the embedding of an existing \"training\" model for use in a second \"testing\" model\n\nExample\n\n# Randomly assign units to train or test sets\ndata[!, :rand] = rand(1:100, nrow(data))\ntrainFilter(unit) = unit.rand < 80\ntestFilter(unit) = !trainFilter(unit)\n\n# Run model on the training set\ntrainmodel = ENAModel(\n    data, codes, conversations, units,\n    unitFilter=trainFilter,\n    rotation=LDARotation(:Act)\n)\n\n# Run new model on the test set, but using the embedding of the trained model\ntestmodel = ENAModel(\n    data, codes, conversations, units,\n    unitFilter=testFilter,\n    rotation=TrainedRotation(trainmodel)\n)\n\nStatistical Tests\n\nModels using a TrainedRotation will run the same statistical tests as the trainmodel.\n\n\n\n\n\n","category":"type"},{"location":"models/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"The following documentation describes the available model options in EpistemicNetworkAnalysis.jl.","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"Once you're familiar with them, continue to learn more about available rotations.","category":"page"},{"location":"models/#ENAModel","page":"Models","title":"ENAModel","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"EpistemicNetworkAnalysis.ENAModel","category":"page"},{"location":"models/#Main.EpistemicNetworkAnalysis.ENAModel","page":"Models","title":"Main.EpistemicNetworkAnalysis.ENAModel","text":"ENAModel(\n    # Required\n    data::DataFrame,\n    codes::Array{Symbol,1},\n    conversations::Array{Symbol,1},\n    units::Array{Symbol,1};\n\n    # Optional\n    rotation::AbstractLinearENARotation=SVDRotation(),\n    unitFilter::Function=unit->true,\n    edgeFilter::Function=edge->edge.kind == :undirected,\n    windowSize::Real=Inf,\n    sphereNormalize::Bool=true,\n    dropEmpty::Bool=false,\n    recenterEmpty::Bool=false\n)\n\nConstruct an undirected ENA model. Nodes are positioned to maximize goodness of fit between plotted points and units' weighted average of edge midpoints.\n\nArguments\n\nThe minimum required arguments are:\n\ndata: DataFrame containing your qualitative data. Each row should represent one \"line\" or the smallest codable unit. Columns should include metadata information, the \"text\" or the qualitative unit itself, and binary-coded qualitative codes.\ncodes: Array listing names of columns to use as the qualitative codes in the model\nconversation: As above, but for columns to use to distinguish \"conversations,\" segments the model should not count connections between\nunits: As above, but for columns to use to distinguish \"speakers\" or your units of analysis\n\nThe common optional arguments are:\n\nrotateBy: \"Rotation\" or dimension reduction the model should use for determining axes for downstream plotting and analysis\nwindowSize: Size of the sliding window for counting connections, where a window size of 1 counts only connections occuring on the same line\ndropEmpty: Whether the model should drop units of analysis that accumulated no connections\n\nFinally, the less common but occassionally useful optional arguments are:\n\nunitFilter: Function for deciding which units of analysis to include in the model, such as based on its metadata\nedgeFilter: As above, but for which edges to include in the model, such as based on which codes it connects. Ensure that only :undirected edges are included\nsphereNormalize: Whether the model should normalize units of analysis so that, for example, speakers who talk more are still considered similar to those who talk less but about the same subjects\nrecenterEmpty: Whether the model should move empty units of analysis to the mean of all units, instead of leaving them at the zero origin\n\nFields\n\nOnce the model is constructed, it will have the following fields:\n\ndata, codes, conversations, units, and rotation: Copies of the argument values given above\nmetadata: DataFrame of original non-code columns, each row corresponding to one unit of analysis. A unitID column is added to represent each unit's unique identifier\npoints: DataFrame, where rows correspond to plotted point dimensions and columns correspond to units of analysis\npointsHat: As above, but for approximate dimensions used for measuring model goodness of fit\npointsNodes: As above, but for the optimized node positions along each plotted dimension\naccum: DataFrame, where rows correspond to units of analysis and columns correspond to edges, counting the (normalized) number of connections that unit accumulated for that edge\naccumHat: As above, but for the approximated counts, used for measuring model goodness of fit\nedges: DataFrame, where rows correspond to edges, with the following columns: edgeID, kind, ground, and response\nnodes: DataFrame, where rows correspond to nodes and columns correspond to approximated counts for each edge, used for computing pointsNodes\nembedding: DataFrame, where rows correspond to plotted point dimensions and columns correspond edges. Used for computing points, pointsHat, and pointsNodes. Additional columns may be added depending on the model's rotation, corresponding to statistical tests for each dimension\nconfig: NamedTuple, storing additional configuration options, such as unitFilter, sphereNormalize, and so on\n\nExample\n\nusing EpistemicNetworkAnalysis\n\n# Load example dataset\ndata = loadExample(\"shakespeare\")\n\n# Base settings\ncodes = [:Love, :Death, :Honor, :Men, :Women]\nconversations = [:Play, :Act, :Scene]\nunits = [:Play, :Speaker]\n\n# Rotation settings\nrotation = TopicRotation(\n    \"Women-Death vs. Honor\",\n    [:Women, :Death],\n    [:Honor]\n)\n\n# Construct model\nmodel = ENAModel(\n    data, codes, conversations, units,\n    windowSize=4,\n    rotateBy=rotation,\n    dropEmpty=false\n)\n\n# Display model overview\nshow(model)\n\n# Display summary statistics\nshow(summary(model))\n\n# Display and save plot\np = plot(model)\nshow(p)\nsavefig(p, \"example.svg\")\n\n# Save model for later use in Julia\nserialize(\"example.ena\", model)\n\n# Save model for easy sharing with collaborators\nto_xlsx(\"example.xlsx\", model)\n\n\n\n\n\n","category":"type"},{"location":"models/#DigraphENAModel","page":"Models","title":"DigraphENAModel","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"EpistemicNetworkAnalysis.DigraphENAModel","category":"page"},{"location":"models/#Main.EpistemicNetworkAnalysis.DigraphENAModel","page":"Models","title":"Main.EpistemicNetworkAnalysis.DigraphENAModel","text":"DigraphENAModel(\n    # Required\n    data::DataFrame,\n    codes::Array{Symbol,1},\n    conversations::Array{Symbol,1},\n    units::Array{Symbol,1};\n\n    # Optional\n    rotation::AbstractLinearENARotation=SVDRotation(),\n    unitFilter::Function=unit->true,\n    edgeFilter::Function=edge->edge.kind == :directed,\n    windowSize::Real=Inf,\n    sphereNormalize::Bool=true,\n    dropEmpty::Bool=false,\n    recenterEmpty::Bool=false\n)\n\nConstruct a directed ENA model. Nodes are positioned to maximize goodness of fit between plotted points and units' weighted average of edge vectors.\n\nDigraphENAModel follows the same argument and field structure as ENAModel.\n\nEnsure that edgeFilter only includes :directed edges.\n\n\n\n\n\n","category":"type"},{"location":"models/#BiplotENAModel","page":"Models","title":"BiplotENAModel","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"EpistemicNetworkAnalysis.BiplotENAModel","category":"page"},{"location":"models/#Main.EpistemicNetworkAnalysis.BiplotENAModel","page":"Models","title":"Main.EpistemicNetworkAnalysis.BiplotENAModel","text":"BiplotENAModel(\n    # Required\n    data::DataFrame,\n    codes::Array{Symbol,1},\n    conversations::Array{Symbol,1},\n    units::Array{Symbol,1};\n\n    # Optional\n    rotation::AbstractLinearENARotation=SVDRotation(),\n    unitFilter::Function=unit->true,\n    sphereNormalize::Bool=true,\n    dropEmpty::Bool=false,\n    recenterEmpty::Bool=false\n)\n\nConstruct a biplot model of unit-wise counts of code occurences, without measuring connections between codes. Model will have perfect goodness of fit between points and pointsHat, will be much simpler than other model types, but will lose most information compared to other model types.\n\nBiplotENAModel follows the same argument and field structure as ENAModel, except edgeFilter and windowSize are in effect ignored.\n\n\n\n\n\n","category":"type"},{"location":"plots/#Plots","page":"Plots","title":"Plots","text":"","category":"section"},{"location":"plots/","page":"Plots","title":"Plots","text":"The following documentation describes arguments and helpful tips for plotting ENA models.","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"Once you're familiar with them, continue to learn more about additional helpful functions.","category":"page"},{"location":"plots/","page":"Plots","title":"Plots","text":"EpistemicNetworkAnalysis.plot(model::EpistemicNetworkAnalysis.AbstractLinearENAModel)","category":"page"},{"location":"plots/#RecipesBase.plot-Tuple{Main.EpistemicNetworkAnalysis.AbstractLinearENAModel}","page":"Plots","title":"RecipesBase.plot","text":"plot(\n    model::AbstractLinearENAModel,\n    x::Int=1,\n    y::Int=2,\n    margin::PlotMeasures.AbsoluteLength=10mm,\n    size::Real=600,\n    meanCenter::Bool=model.config.sphereNormalize,\n    origin::Array{<:Real}=(meanCenter ?  [mean(model.points[x, :]), mean(model.points[y, :])] : [0,0]),\n    zoom::Real=1,\n    lims::Real=1/zoom,\n    flipX::Bool=false,\n    flipY::Bool=false,\n    xticks::Array{<:Real}=(\n        round.([origin[1]-lims, origin[1], origin[1]+lims], digits=4) |>\n        (xticks) -> (flipX ? -reverse(xticks) : xticks)\n    ),\n    yticks::Array{<:Real}=(\n        round.([origin[2]-lims, origin[2], origin[2]+lims], digits=4) |>\n        (yticks) -> (flipY ? -reverse(yticks) : yticks)\n    ),\n    xlims::Array{<:Real}=xticks[[1, end]],\n    ylims::Array{<:Real}=yticks[[1, end]],\n    titles::Array{<:AbstractString}=String[],\n    xlabel::AbstractString=model.embedding[x, :label],\n    ylabel::AbstractString=model.embedding[y, :label],\n    unitLabel::AbstractString=\"Unit\",\n    leg::Union{Symbol,Bool}=:topleft,\n    negColor::Colorant=DEFAULT_NEG_COLOR,\n    posColor::Colorant=DEFAULT_POS_COLOR,\n    extraColors::Array{<:Colorant,1}=DEFAULT_EXTRA_COLORS,\n    alphabet::String=DEFAULT_ALPHABET,\n    groupBy::Union{Symbol,Nothing}=nothing,\n    innerGroupBy::Union{Symbol,Nothing}=nothing,\n    spectralColorBy::Union{Symbol,Nothing}=nothing,\n    trajectoryBy::Union{Symbol,Nothing}=nothing,\n    trajectoryBins::Int=5,\n    showExtras::Bool=false,\n    showNetworks::Bool=true,\n    showUnits::Bool=true,\n    showMeans::Bool=true,\n    showWarps::Bool=false,\n    fitNodesToCircle::Bool=false,\n    showWeakEdges::Bool=true\n)\n\nPlot an ENA model using the GR backend\n\nSee also savefig\n\nArguments\n\nAt minimum, the only required argument is the ENA model itself.\n\nSeveral optional arguments are available:\n\nx and y control which dimension to show on the x- and y-axis respectively\nmargin, size, meanCenter, origin, zoom, lims, flipX, flipY, xticks, yticks, xlims, and ylims together control aspects of the plot size and axes\ntitles, xlabel, ylabel, unitLabel, leg, and alphabet together control the text that labels the plot\nnegColor, posColor, and extraColors together control the colors used in the plot\ngroupBy and innerGroupBy define which metadata columns to use as grouping variables for the sake of color coding and confidence intervals\nspectralColorBy defines which metadata column to use to color-code units as a spectrum\ntrajectoryBy and trajectoryBins together define and control how a trajectory path should be overlaid on the plot\nshowExtras, showNetworks, showUnits, and showMeans control which plot elements to show or hide. Currently, showExtras is unimplemented, but is defined to permit future additions under an \"extra\" plot element category\nshowWarps controls if edges should be drawn straight (false) or \"warped\" to show their true location in the space (true)\nfitNodesToCircle controls if nodes should be shown in their optimized positions for goodness of fit, or at a circular position around the origin\nshowWeakEdges controls if edges with weak correlations to trends should be shown\n\nExample\n\nmodel = ENAModel(data, codes, conversations, units)\np = plot(model)\n\n# Grab one subplot\nsp = plot(p.subplots[1], size=(600, 600))\n\n# Save\nsavefig(p, \"example.png\")\n\n\n\n\n\n","category":"method"},{"location":"#EpistemicNetworkAnalysis.jl","page":"Home","title":"EpistemicNetworkAnalysis.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Author: Mariah A. Knowles (@snotskie)","category":"page"},{"location":"","page":"Home","title":"Home","text":"A port of rENA version 0.2.0.1 into native Julia, with substantial API changes to fit Julia style, and with addition of new rotation methods.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Original R package by http://www.epistemicnetwork.org/.","category":"page"},{"location":"#Recommended-Citation","page":"Home","title":"Recommended Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use this Julia implementation of ENA in your research, please cite it, the Julia language, and the R version it is based on, as shown below; describe it as \"...a port of ENA from the original R to Julia (Bezanson et al, 2017; Knowles, 2021; Marquart et al 2019)\"; and justify your choice of Julia over R. For example, your research team may be more familiar with Julia, you may need interoperability with other existing Julia libraries, or you may need access to dimension reductions (\"rotations\") not defined in rENA.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Bezanson, J., Edelman, A., Karpinski S., & Shah V. B. (2017). Julia: A Fresh Approach to Numerical Computing. SIAM Review, 59: 65-98.Knowles, M. A. (2023). EpistemicNetworkAnalysis.jl (Version 0.5.0) [Software] Available from https://github.com/snotskie/EpistemicNetworkAnalysis.jlMarquart, C. L., Swiecki, Z., Collier, W., Eagan, B., Woodward, R., & Shaffer, D. W. (2019). rENA: Epistemic Network Analysis (Version 0.2.0.1) [Software] Available from https://cran.r-project.org/web/packages/rENA/index.html","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"I recommend installing Julia for Visual Code first.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then to install this package, run the following in Julia:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/snotskie/EpistemicNetworkAnalysis.jl\")\nusing EpistemicNetworkAnalysis","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once you've done that, test that everything works by running the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using EpistemicNetworkAnalysis\n\ndata = loadExample(\"shakespeare\")\ncodes = [:Love, :Death, :Honor, :Men, :Women]\nconversations = [:Play, :Act, :Scene]\nunits = [:Play, :Speaker]\nrotation = MeansRotation(:Play, \"Romeo and Juliet\", \"Hamlet\")\n\nmodel = ENAModel(\n    data, codes, conversations, units,\n    windowSize=4,\n    rotateBy=rotation\n)\n\nshow(model)\nshow(plot(model))","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you run into any issues, don't hesitate to file an issue or ask for help.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then once you're ready, continue to learn more about available models.","category":"page"}]
}
