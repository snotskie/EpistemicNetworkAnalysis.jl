---
title: Rotations
author: Mariah A. Knowles
date: March, 17th 2021
---

## Family Tree

First, in the Julia implementation of ENA, there is a family tree of rotations to choose from. This takes advantage of Julia's type system and optimization strategies.

The following sections describe the members of this family tree that are instantiable.

## SVD Rotation

Second, by default the `ENAModel` constructor uses an `SVDRotation`. This rotation is good for visually spreading the units out as much as possible when little else is known about the variance of the space.

For example:

```julia
using EpistemicNetworkAnalysis

data = ena_dataset("RS.data")
codes = [
    :Data,
    :Technical_Constraints,
    :Performance_Parameters,
    :Client_and_Consultant_Requests,
    :Design_Reasoning,
    :Collaboration
]

conversations = [:Condition, :GameHalf, :GroupName]
units = [:Condition, :GameHalf, :UserName]

myRotation = SVDRotation()

ena = ENAModel(data, codes, conversations, units, rotateBy=myRotation)
plot(ena)
```

*Interpretation: The first dimension of the SVD appears to highlight an axis from talking about the technical details of how to make a solution work to talking about the goals and requirements of the project writ-large.*

## Means Rotation

Third, a very common rotation in ENA applications is the `MeansRotation`. This rotation takes a grouping variable and two group labels, then finds the vector through the high dimensional space that runs through the means of these two groups. It then uses that vector as the x-axis, showing the maximum difference between the groups horizontally on the plot. The y-axis is taken to be an SVD of the remaining space, since that produces a legible plot.

By default, plots of ENA models that us a `MeansRotation` will be color-coded in red-vs-blue, show the means and confidence intervals for the two groups, and show the subtraction of the two groups' networks.

For example:

```julia
myRotation = MeansRotation(:Condition, "FirstGame", "SecondGame")
ena = ENAModel(data, codes, conversations, units, rotateBy=myRotation)
plot(ena)
```

*Interpretation: The x-axis highlights the maximum difference between the first and second game. In the first game, students were relatively more focused on figuring out what they were supposed to do. In the second game, they were relatively more focused on working through the problem using design thinking methods they had learned in class.*

## Double Means Rotation

Fourth, a new addition in the Julia implementation of ENA, one can choose a different y-axis by using a `Means2Rotation`, or "double means" rotation. This is similar to a `MeansRotation` with a few adjustments:

- The x-axis shows the direction of the effect of the first grouping variable on the high dimensional space *when the second grouping variable is held constant*
- The y-axis similarly shows the direction of the effect of the second grouping variable, while the first variable is held constant, but also made independent of the effect modeled by the x-axis

An important note about that second bullet point: The goal of the double means rotation is to find the *plane* within the high dimensional space that contains the effects of the two grouping variables. Since these are not guaranteed to be orthogonal, the plane is rotated such that the x-axis aligns with the effect of the first grouping variable.

If the two variables have nearly orthogonal effects on the space, then the distinction does not matter. But if they are nearly colinear, then the y-axis will appear "smushed," since the variance explained by the second grouping variable would have already been nearly "claimed" by the x-axis.

So, one should always choose two grouping variables that are, in theory, orthogonal to one another. Ideally, the double means rotation plot should be able to split the first dimension into two groups, then split those along the second dimension into four groups.

For example:

```julia
myRotation = Means2Rotation(
    :Condition, "FirstGame", "SecondGame",
    :GameHalf, "First", "Second"
)

ena = ENAModel(data, codes, conversations, units, rotateBy=myRotation)
plot(ena)
```

*Interpretation: TODO*

## LDA Rotation

Fifth, an experimental new addition in the Julia implementation of ENA, one can choose to show an axis that maximizes the effect size between two or more groups.

```julia
myRotation = LDARotation(:Condition)
ena = ENAModel(data, codes, conversations, units, rotateBy=myRotation)
plot(ena)
```

*Interpretation: TODO*

However, the LDA rotation tends to find a rotation along which the accumulation and centroid spaces do not have high correlations. This hinders interpretability of the axes in terms of the plotted network positions. It also tends to find a rotation with very low variances explained. This hinders interpretability of the plots in terms of any original qualitative story.

*Interpretation: TODO*

LDA can also be used to visually spread many groups.

```julia
myRotation = LDARotation(:GroupName)
someData = data[data[!, :Condition] .== "FirstGame", :]
someData = someData[someData[!, :GameHalf] .== "Second", :]
ena = ENAModel(someData, codes, conversations, units, rotateBy=myRotation)
plot(ena)
```

*Interpretation: TODO*

## Formula Rotation

Sixth, advanced users may want to have more control over the model. Doing so is an experimental feature, and the researcher should be careful to validate their model and their results.

To do this, the researcher can access the `FormulaRotation` that underlies the `MeansRotation`, or similarly the `Formula2Rotation` that underlies the `Means2Rotation`.

For example:

```julia
using GLM

myRotation = FormulaRotation(
    LinearModel, 2, @formula(y ~ 1 + CONFIDENCE_Pre), nothing
)

ena = ENAModel(data, codes, conversations, units, rotateBy=myRotation)
plot(ena)
```

*Interpretation: Students who had lower confidence before the game went on to make more connections with Technical Constraints, whereas those that went in with more confidence made more connections with Performance Parameters. Note, this confidence score correlates with which game the students were in, those going into the first having lower confidence than those going into the second.*

In order, the parameters to the `FormulaRotation` constructor are:

1. Regression model type. Currently, I have confirmed that `LinearModel` works without error so long as the underlying data is in good form. In the future I would like it to be possible to hot-swap this with, eg, a `LASSOModel`.
2. Coefficient index. This specifies which beta from the regression to use to determine the x-axis vector. Since the formula in this case was `1 + CONFIDENCE_Pre`, the model will highlight the direction of the effect of the `CONFIDENCE_Pre` variable.
3. Regression formula. I recommend always including the `1` to make the intercept explicit, so as to prevent unexpected off-by-one errors when the intercept is included automatically in models. Also, if multiple predictors are included, they *must* be mean centered. This is so that the direction of their effects is from the *grand* mean, not the mean of some particular group. I also recommend including interaction effects when using linear models. The name of the dependent variable in the formula is meaningless and is just a placeholder to be replaced within the internal rotation logic. 
4. A dictionary for specifying contrasts. This is useful when including categorical variables as controls. For example, if you include a variable like `GroupName` in the formula to control the model for nesting within groups, use a contrast dictionary like `Dict(:GroupName => EffectsCoding())` to ensure that the model shows the effects on the grand mean, not whichever mean happens to be dummy-coded as zero.

The parameters for `Formula2Rotation` are identical to the first, just repeated:

```julia
using GLM

# Mean Center
using Statistics
data[!, :CONFIDENCE_Pre_MC] = data[!, :CONFIDENCE_Pre] .- mean(data[!, :CONFIDENCE_Pre])
data[!, :CONFIDENCE_Post_MC] = data[!, :CONFIDENCE_Post] .- mean(data[!, :CONFIDENCE_Post])

# ENA Model
myRotation = Formula2Rotation(
    LinearModel, 2, @formula(y ~ 1 + CONFIDENCE_Pre_MC + CONFIDENCE_Post_MC), nothing,
    LinearModel, 3, @formula(y ~ 1 + CONFIDENCE_Pre_MC + CONFIDENCE_Post_MC), nothing
)

ena = ENAModel(data, codes, conversations, units, rotateBy=myRotation)
plot(ena)
```

*Interpretation: Those that had low confidence before and after their game made more connections to Technical Constraints. Those that had high confidence before and after made more connections to Performance Parameters. Those that increased in confidence during the game had more connections between the remaining codes except for Design Reasoning. Because Design Reasoning is very near the origin, there might be no effect between it and a student's confidence.*

While the formula rotations allow you to fully customize the rotation, it is still in the air what the best way to visualize the rotations should be. Unlike in a means rotation where the confidence intervals give some indication to the strength of the rotation, that cue is missing in formula rotations.

## Plotting

TODO add a page about the biplot model

Finally, [learn about customizing the plots](Plotting.html)