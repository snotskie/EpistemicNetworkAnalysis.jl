var documenterSearchIndex = {"docs":
[{"location":"#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"#ENAModel","page":"Models","title":"ENAModel","text":"","category":"section"},{"location":"","page":"Models","title":"Models","text":"EpistemicNetworkAnalysis.ENAModel","category":"page"},{"location":"#Main.EpistemicNetworkAnalysis.ENAModel","page":"Models","title":"Main.EpistemicNetworkAnalysis.ENAModel","text":"ENAModel(\n    # Required\n    data::DataFrame,\n    codes::Array{Symbol,1},\n    conversations::Array{Symbol,1},\n    units::Array{Symbol,1};\n\n    # Optional\n    rotation::AbstractLinearENARotation=SVDRotation(),\n    unitFilter::Function=unit->true,\n    edgeFilter::Function=edge->edge.kind == :undirected,\n    windowSize::Real=Inf,\n    sphereNormalize::Bool=true,\n    dropEmpty::Bool=false,\n    recenterEmpty::Bool=false\n)\n\nConstruct an undirected ENA model. Nodes are positioned to maximize goodness of fit between plotted points and units' weighted average of edge midpoints.\n\nArguments\n\nThe minimum required arguments are:\n\ndata: DataFrame containing your qualitative data. Each row should represent one \"line\" or the smallest codable unit. Columns should include metadata information, the \"text\" or the qualitative unit itself, and binary-coded qualitative codes.\ncodes: Array listing names of columns to use as the qualitative codes in the model\nconversation: As above, but for columns to use to distinguish \"conversations,\" segments the model should not count connections between\nunits: As above, but for columns to use to distinguish \"speakers\" or your units of analysis\n\nThe common optional arguments are:\n\nrotateBy: \"Rotation\" or dimension reduction the model should use for determining axes for downstream plotting and analysis\nwindowSize: Size of the sliding window for counting connections, where a window size of 1 counts only connections occuring on the same line\ndropEmpty: Whether the model should drop units of analysis that accumulated no connections\n\nFinally, the less common but occassionally useful optional arguments are:\n\nunitFilter: Function for deciding which units of analysis to include in the model, such as based on its metadata\nedgeFilter: As above, but for which edges to include in the model, such as based on which codes it connects. Ensure that only :undirected edges are included\nsphereNormalize: Whether the model should normalize units of analysis so that, for example, speakers who talk more are still considered similar to those who talk less but about the same subjects\nrecenterEmpty: Whether the model should move empty units of analysis to the mean of all units, instead of leaving them at the zero origin\n\nFields\n\nOnce the model is constructed, it will have the following fields:\n\ndata, codes, conversations, units, and rotation: Copies of the argument values given above\nmetadata: DataFrame of original non-code columns, each row corresponding to one unit of analysis. A unitID column is added to represent each unit's unique identifier\npoints: DataFrame, where rows correspond to plotted point dimensions and columns correspond to units of analysis\npointsHat: As above, but for approximate dimensions used for measuring model goodness of fit\npointsNodes: As above, but for the optimized node positions along each plotted dimension\naccum: DataFrame, where rows correspond to units of analysis and columns correspond to edges, counting the (normalized) number of connections that unit accumulated for that edge\naccumHat: As above, but for the approximated counts, used for measuring model goodness of fit\nedges: DataFrame, where rows correspond to edges, with the following columns: edgeID, kind, ground, and response\nnodes: DataFrame, where rows correspond to nodes and columns correspond to approximated counts for each edge, used for computing pointsNodes\nembedding: DataFrame, where rows correspond to plotted point dimensions and columns correspond edges. Used for computing points, pointsHat, and pointsNodes. Additional columns may be added depending on the model's rotation, corresponding to statistical tests for each dimension\nconfig: NamedTuple, storing additional configuration options, such as unitFilter, sphereNormalize, and so on\n\nExample\n\nusing EpistemicNetworkAnalysis\n\n# Load example dataset\ndata = loadExample(\"shakespeare\")\n\n# Base settings\ncodes = [:Love, :Death, :Honor, :Men, :Women]\nconversations = [:Play, :Act, :Scene]\nunits = [:Play, :Speaker]\n\n# Rotation settings\nrotation = TopicRotation(\n    \"Women-Death vs. Honor\",\n    [:Women, :Death],\n    [:Honor]\n)\n\n# Construct model\nmodel = ENAModel(\n    data, codes, conversations, units,\n    windowSize=4,\n    rotateBy=rotation,\n    dropEmpty=false\n)\n\n# Display model overview\nshow(model)\n\n# Display summary statistics\nshow(summary(model))\n\n# Display and save plot\np = plot(model)\nshow(p)\nsavefig(p, \"example.svg\")\n\n# Save model for later use in Julia\nserialize(\"example.ena\", model)\n\n# Save model for easy sharing with collaborators\nto_xlsx(\"example.xlsx\", model)\n\n\n\n\n\n","category":"type"},{"location":"#DigraphENAModel","page":"Models","title":"DigraphENAModel","text":"","category":"section"},{"location":"","page":"Models","title":"Models","text":"EpistemicNetworkAnalysis.DigraphENAModel","category":"page"},{"location":"#Main.EpistemicNetworkAnalysis.DigraphENAModel","page":"Models","title":"Main.EpistemicNetworkAnalysis.DigraphENAModel","text":"DigraphENAModel(\n    # Required\n    data::DataFrame,\n    codes::Array{Symbol,1},\n    conversations::Array{Symbol,1},\n    units::Array{Symbol,1};\n\n    # Optional\n    rotation::AbstractLinearENARotation=SVDRotation(),\n    unitFilter::Function=unit->true,\n    edgeFilter::Function=edge->edge.kind == :directed,\n    windowSize::Real=Inf,\n    sphereNormalize::Bool=true,\n    dropEmpty::Bool=false,\n    recenterEmpty::Bool=false\n)\n\nConstruct a directed ENA model. Nodes are positioned to maximize goodness of fit between plotted points and units' weighted average of edge vectors.\n\nDigraphENAModel follows the same argument and field structure as ENAModel.\n\nEnsure that edgeFilter only includes :directed edges.\n\n\n\n\n\n","category":"type"},{"location":"#BiplotENAModel","page":"Models","title":"BiplotENAModel","text":"","category":"section"},{"location":"","page":"Models","title":"Models","text":"EpistemicNetworkAnalysis.BiplotENAModel","category":"page"},{"location":"#Main.EpistemicNetworkAnalysis.BiplotENAModel","page":"Models","title":"Main.EpistemicNetworkAnalysis.BiplotENAModel","text":"BiplotENAModel(\n    # Required\n    data::DataFrame,\n    codes::Array{Symbol,1},\n    conversations::Array{Symbol,1},\n    units::Array{Symbol,1};\n\n    # Optional\n    rotation::AbstractLinearENARotation=SVDRotation(),\n    unitFilter::Function=unit->true,\n    sphereNormalize::Bool=true,\n    dropEmpty::Bool=false,\n    recenterEmpty::Bool=false\n)\n\nConstruct a biplot model of unit-wise counts of code occurences, without measuring connections between codes. Model will have perfect goodness of fit between points and pointsHat, will be much simpler than other model types, but will lose most information compared to other model types.\n\nBiplotENAModel follows the same argument and field structure as ENAModel, except edgeFilter and windowSize are in effect ignored.\n\n\n\n\n\n","category":"type"},{"location":"#Rotations","page":"Models","title":"Rotations","text":"","category":"section"},{"location":"#SVDRotation","page":"Models","title":"SVDRotation","text":"","category":"section"},{"location":"","page":"Models","title":"Models","text":"EpistemicNetworkAnalysis.SVDRotation","category":"page"},{"location":"#Main.EpistemicNetworkAnalysis.SVDRotation","page":"Models","title":"Main.EpistemicNetworkAnalysis.SVDRotation","text":"SVDRotation()\n\nThe default rotation for linear ENA models. Reduces dimensions usings singular value decomposition\n\n\n\n\n\n","category":"type"},{"location":"#MeansRotation","page":"Models","title":"MeansRotation","text":"","category":"section"},{"location":"","page":"Models","title":"Models","text":"EpistemicNetworkAnalysis.MeansRotation","category":"page"},{"location":"#Main.EpistemicNetworkAnalysis.MeansRotation","page":"Models","title":"Main.EpistemicNetworkAnalysis.MeansRotation","text":"MeansRotation(\n    # Required, groups to compare along the x-axis\n    groupVar1::Symbol,\n    controlGroup1::Any,\n    treatmentGroup1::Any,\n\n    # Optional, groups to compare along subsequent axes\n    args...;\n\n    # Optional, whether to moderate the interactions between group dimensions\n    moderated=false\n)\n\nDefine a rotation for comparing pairs of groups, by maximizing the variance between pairs\n\nSee also: LDARotation and MulticlassRotation\n\nExample\n\nrotation = MeansRotation(\n    :Play, \"Romeo and Juliet\", \"Hamlet\",\n    :Act, 1, 5\n)\n\nStatistical Tests\n\nModels using a MeansRotation will run the following statistical tests:\n\nKruskalWallisTest for each dimension with a group pair\n\n\n\n\n\n","category":"type"},{"location":"#LDARotation","page":"Models","title":"LDARotation","text":"","category":"section"},{"location":"","page":"Models","title":"Models","text":"EpistemicNetworkAnalysis.LDARotation","category":"page"},{"location":"#Main.EpistemicNetworkAnalysis.LDARotation","page":"Models","title":"Main.EpistemicNetworkAnalysis.LDARotation","text":"LDARotation(\n    groupVar::Symbol\n)\n\nDefine a rotation for comparing multiple groups, via linear discriminant analysis\n\nSee also: MeansRotation and MulticlassRotation\n\nExample\n\nrotation = LDARotation(:Act)\n\nStatistical Tests\n\nModels using an LDARotation will run the following statistical tests:\n\nKruskalWallisTest for each dimension\n\n\n\n\n\n","category":"type"},{"location":"#MulticlassRotation","page":"Models","title":"MulticlassRotation","text":"","category":"section"},{"location":"","page":"Models","title":"Models","text":"EpistemicNetworkAnalysis.MulticlassRotation","category":"page"},{"location":"#Main.EpistemicNetworkAnalysis.MulticlassRotation","page":"Models","title":"Main.EpistemicNetworkAnalysis.MulticlassRotation","text":"MulticlassRotation(\n    groupVar::Symbol\n)\n\nDefine a rotation for comparing multiple groups, by maximizing between-group variance\n\nSee also: MeansRotation and LDARotation\n\nExample\n\nrotation = MulticlassRotation(:Act)\n\nStatistical Tests\n\nModels using an MulticlassRotation will run the following statistical tests:\n\nKruskalWallisTest for each dimension\n\n\n\n\n\n","category":"type"},{"location":"#FormulaRotation","page":"Models","title":"FormulaRotation","text":"","category":"section"},{"location":"","page":"Models","title":"Models","text":"EpistemicNetworkAnalysis.FormulaRotation","category":"page"},{"location":"#Main.EpistemicNetworkAnalysis.FormulaRotation","page":"Models","title":"Main.EpistemicNetworkAnalysis.FormulaRotation","text":"FormulaRotation(\n    regression_model1::Type{T},\n    formula1::FormulaTerm,\n    coef_index1::Int,\n    contrast1::Union{Nothing,Dict},\n    args...\n) where {T <: RegressionModel}\n\nDefine a rotation that uses regression models to determine axes most closely associated with some linear trend\n\nNote: RegressionModels must be imported from other stats packages\n\nNote: contrasts are used to model categorical data\n\nExample\n\nusing GLM\n\nrotation = EpistemicNetworkAnalysis.FormulaRotation(\n    LinearModel, @formula(edge ~ 1 + FinalGrade), 2, nothing\n)\n\nThis will fit the x-axis to the FinalGrade metadata, because:\n\nWe use LinearModel from the GLM package\nWe use the formula edge ~ 1 + FinalGrade\nAnd we use the 2nd coefficient of the LinearModel (in this case FinalGrade) to determine the values of the embedding\nWe have no categorical data in the LinearModel, so we leave the contrasts as nothing\n\nAdditional formulae may be used to define subsequent axes:\n\nrotation = EpistemicNetworkAnalysis.FormulaRotation(\n    LinearModel, @formula(edge ~ 1 + PretestGrade + PosttestGrade), 2, nothing,\n    LinearModel, @formula(edge ~ 1 + PretestGrade + PosttestGrade), 3, nothing\n)\n\nNote: When multiple formulae are given, FormulaRotation finds the plane of the effects in the accum space, rotating it such that the first formula aligns with the x-axis, and the second formula aligns approximately with the y-axis. Unless this approximation is strong, a warning will be raised describing possible issues.\n\nStatistical Tests\n\nModels using a MeansRotation will run the following statistical tests:\n\nR^2 and adjusted-R^2 for each dimension with a formula\n\n\n\n\n\n","category":"type"},{"location":"#TopicRotation","page":"Models","title":"TopicRotation","text":"","category":"section"},{"location":"","page":"Models","title":"Models","text":"EpistemicNetworkAnalysis.TopicRotation","category":"page"},{"location":"#Main.EpistemicNetworkAnalysis.TopicRotation","page":"Models","title":"Main.EpistemicNetworkAnalysis.TopicRotation","text":"TopicRotation(\n    topicName::AbstractString,\n    controlNodes::Array{Symbol},\n    treatmentNodes::Array{Symbol}\n)\n\nDefine a rotation that places its x-axis through the mean of controlNodes on the left and the mean of treatmentNodes on the right, ie., through an a priori defined topic\n\nExample\n\nrotation = TopicRotation(\n    \"Women-Death vs. Honor\",\n    [:Women, :Death],\n    [:Honor]\n)\n\n\n\n\n\n","category":"type"},{"location":"#TrainedRotation","page":"Models","title":"TrainedRotation","text":"","category":"section"},{"location":"","page":"Models","title":"Models","text":"EpistemicNetworkAnalysis.TrainedRotation","category":"page"},{"location":"#Main.EpistemicNetworkAnalysis.TrainedRotation","page":"Models","title":"Main.EpistemicNetworkAnalysis.TrainedRotation","text":"TrainedRotation(\n    trainmodel::AbstractLinearENAModel\n)\n\nDefine a rotation that copies the embedding of an existing \"training\" model for use in a second \"testing\" model\n\nExample\n\ntrainmodel = ENAModel(traindata, codes, conversations, units, rotation=LDARotation(:Act))\ntestmodel = ENAModel(testdata, codes, conversations, units, rotation=TrainedRotation(trainmodel))\n\nStatistical Tests\n\nModels using a TrainedRotation will run the same statistical tests as the trainmodel.\n\n\n\n\n\n","category":"type"}]
}
